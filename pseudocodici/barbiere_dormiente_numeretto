BARBIERE DORMIENTE CON NUMERETTO

concurrent program BARBIERE_DORMIENTE_NUMERETTO;

type barbiere = concurrent procedure;
begin
	loop
		P(C); //attendi clienti
		P(MX); 
		in_attesa <- in_attesa -1;
		P(TX);
		turno <- turno + 1; //aumento il turno
		V(B); //segnala la disponibilità
		V(MX);
		V(TX);
		<<taglia i capelli>>
	end
end

type cliente = concurrent procedure;
begin 
	<<raggiungi il negozio>>
	P(MX);
	if(in_attesa<N) //verifico se c'è posto a sedere
		in_attesa <- in_attesa + 1;
		P(NX);
		numeretto <- numeretto + 1; //prendo il numeretto
		V(NX);
		loop
			P(NX);
			P(TX);
			if(numeretto == turno)
				V(MX);
				V(C);
				V(NX);
				V(TX);
				P(B); //aspetta che il barbiere finisce
				<<siediti>>
				<<esci dal loop>>
			else //non è il tuo turno
				V(MX);
				V(NX);
				V(TX);
		end
	else V(MX);
end

var Dormiente: barbiere;
var CLIENTE array[0...NUM_CLIENTI] of cliente
var C, MX, NX, TX, B: semaforo; //C è il semaforo associato ai clienti, MX mutex associato a in_attesa, B è il semaforo associato al barbiere, 
// TX mutex associato a turno, NX mutex associato al numeretto
var N = 5;
var in_attesa : intero;
var numeretto, turno: intero;
begin 
	INIZ_SEM(MX,1); INIZ_SEM(C,0); INIZ_SEM(B,0); INIZ_SEM(NX,1); INIZ_SEM(TX,1);
	fork Dormiente;
	for J <- 0 to NUM_CLIENTI do fork CLIENTE[J];
	for J <- 0 to NUM_CLIENTI do join CLIENTE[J];
	join Dormiente;
end